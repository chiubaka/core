{"version":3,"sources":["../src/api/actions/ModelApi/adapters/RestApiAdapter.ts"],"names":[],"mappings":"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","file":"../../../../../api/actions/ModelApi/adapters/RestApiAdapter.js","sourcesContent":["import * as pluralize from \"pluralize\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\nimport { ModelApi } from \"../\";\nimport { RestClient } from \"../../../clients/RestClient\";\nimport { IModel } from \"../../../model\";\nimport { ApiAction } from \"../../types\";\nimport { IModelApiAdapter } from \"./types\";\n\n// Clients will have all kinds of States and all kinds of Actions, so must use any here.\ndeclare type Dispatch = ThunkDispatch<any, void, any>;\n\nexport class RestApiAdapter<\n  BackendType extends IModel,\n  FrontendType extends IModel = BackendType\n> implements IModelApiAdapter<BackendType, FrontendType> {\n  private static API_PATH = \"/api\";\n\n  protected endpoint: string;\n  protected api: ModelApi<BackendType, FrontendType>;\n\n  protected client: RestClient;\n\n  constructor(modelName: string, client: RestClient = RestClient.getInstance()) {\n    this.client = client;\n    this.endpoint = `${RestApiAdapter.API_PATH}/${pluralize(modelName.toLowerCase())}/`;\n  }\n\n  public setApi(api: ModelApi<BackendType, FrontendType>) {\n    this.api = api;\n  }\n\n  public getAll = () => {\n    return this.client.actionCreator(\n      this.getListEndpoint(),\n      null,\n      \"GET\",\n      (dispatch: Dispatch, response: FrontendType[]) => {\n        dispatch(this.api.successfulGetAllAction(response));\n      },\n      null,\n      this.api.bulkTransformForFrontend,\n    );\n  }\n\n  public get = (id: string) => {\n    return this.client.actionCreator(\n      this.getItemEndpoint(id),\n      null,\n      \"GET\",\n      (dispatch: Dispatch, response: FrontendType) => {\n        dispatch(this.api.successfulGetAction(response));\n      },\n      null,\n      this.api.transformForFrontend);\n  }\n\n  public create = (payload: Partial<FrontendType>) => {\n    return this.client.actionCreator(\n      this.getListEndpoint(),\n      payload,\n      \"POST\",\n      (dispatch: Dispatch, response: FrontendType) => {\n        dispatch(this.api.successfulCreateAction(response));\n        this.api.processModelUpdateDependencies(dispatch, response);\n      },\n      this.api.transformForBackend,\n      this.api.transformForFrontend) as ApiAction<FrontendType>;\n  }\n\n  public update = (original: FrontendType, updated: FrontendType) => {\n    return this.client.actionCreator(\n      this.getItemEndpoint(updated.id),\n      updated,\n      \"PUT\",\n      (dispatch: Dispatch, response: FrontendType) => {\n        dispatch(this.api.successfulUpdateAction(original, response));\n        this.api.processModelUpdateDependencies(dispatch, original);\n        this.api.processModelUpdateDependencies(dispatch, response);\n      },\n      this.api.transformForBackend,\n      this.api.transformForFrontend,\n    );\n  }\n\n  public delete = (deleted: FrontendType) => {\n    return this.client.actionCreator(\n      this.getItemEndpoint(deleted.id),\n      null,\n      \"DELETE\",\n      (dispatch: Dispatch, _response: unknown) => {\n        dispatch(this.api.successfulDeleteAction(deleted));\n      },\n    );\n  }\n\n  private getListEndpoint() {\n    return this.endpoint;\n  }\n\n  private getItemEndpoint(id: string) {\n    return `${this.endpoint}${id}/`;\n  }\n}\n"]}