{"version":3,"sources":["../src/auth/actions/AuthApi.ts"],"names":[],"mappings":"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","file":"../../../auth/actions/AuthApi.js","sourcesContent":["import * as HttpStatus from \"http-status-codes\";\n\nimport { Api, IApiError } from \"../../api/actions/Api\";\nimport { IJwtUserResponse, IUser } from \"../../app/types\";\nimport { IAuthState } from \"../model/AuthenticationState\";\nimport { completeLogin, failLogin, startLogin, successfulGetUserDetails } from \"./creators\";\nimport { completeLogoutAndRedirect } from \"./thunks\";\nimport { AuthDispatch as Dispatch } from \"./types\";\n\nexport class AuthApi extends Api {\n  public static getInstance(): AuthApi {\n    if (!AuthApi.singleton) {\n      AuthApi.singleton = new AuthApi();\n    }\n\n    return AuthApi.singleton;\n  }\n\n  private static singleton: AuthApi;\n\n  private static userFromJwtUserResponse(response: IJwtUserResponse): IUser {\n    return {\n      id: response.id,\n      username: response.username,\n      email: response.email,\n      firstName: response.firstName,\n      lastName: response.lastName,\n    };\n  }\n\n  public login(username: string, password: string) {\n    return (dispatch: Dispatch, getState: () => IAuthState) => {\n      dispatch(startLogin());\n      const authState = getState().auth;\n      const innerPayload = authState.useEmailAsUsername\n        ? { email: username, password }\n        : { username, password };\n\n      // Some auth systems expect parameters in the form:\n      // {\n      //   user: {\n      //     email: test@test.com\n      //     password: testtest\n      //   }\n      // }\n      const payload = getState().auth.wrapParameters\n        ? { user: innerPayload }\n        : innerPayload;\n      return this.postRequest(\"/api/login/username/jwt/\", payload, dispatch, null)\n        .then((response: IJwtUserResponse) => {\n          if (response) {\n            if (response.token) {\n              dispatch(completeLogin(response.token));\n            }\n            if (response.email) {\n              const user = AuthApi.userFromJwtUserResponse(response);\n              dispatch(successfulGetUserDetails(user));\n            } else {\n              // TODO: Should really fix the Django server so that it returns the user details\n              // with the tokens--that would allow elimination of this branching code path.\n              // Have to grab new state because we've just updated through dispatch, in theory\n              const token = getState().auth.token;\n              return this.getRequest(\"/api/users/me/\", null, dispatch, token)\n              .then((userDetailsResponse: IUser) => {\n                dispatch(successfulGetUserDetails(userDetailsResponse));\n              });\n            }\n          }\n        });\n    };\n  }\n\n  public socialLogin(provider: string, code: string, redirectUri: string) {\n    return (dispatch: Dispatch, getState: () => IAuthState) => {\n      dispatch(startLogin());\n      const payload = {\n        provider,\n        code,\n        redirect_uri: redirectUri,\n      };\n      return this.postRequest(\"/api/login/social/jwt_user/\", payload, dispatch, getState().auth.token)\n        .then((response: IJwtUserResponse) => {\n          const user = AuthApi.userFromJwtUserResponse(response);\n          dispatch(completeLogin(response.token));\n          dispatch(successfulGetUserDetails(user));\n        });\n    };\n  }\n\n  public logout() {\n    return (dispatch: Dispatch, getState: () => IAuthState) => {\n      const token = getState().auth.token;\n      return this.deleteRequest(\"/api/logout/jwt/\", dispatch, token)\n      .then(() => {\n        dispatch(completeLogoutAndRedirect());\n      });\n    };\n  }\n\n  protected errorTransformer(_url: string, _error: IApiError): Promise<string> {\n    return Promise.reject(\"Invalid credentials.\");\n  }\n\n  protected handleUnsuccessfulRequest(reason: string, dispatch: Dispatch) {\n    super.handleUnsuccessfulRequest(reason, dispatch);\n    dispatch(failLogin(reason));\n  }\n\n  protected handleApiResponse<T>(dispatch: Dispatch, response: Response): Promise<T | string> {\n    switch (response.status) {\n      case HttpStatus.OK:\n      case HttpStatus.CREATED:\n        // Handle pulling the JWT token out of the headers if it appears there.\n        const authorizationHeader = response.headers.get(\"Authorization\");\n        if (authorizationHeader !== null) {\n          const token = authorizationHeader.split(\" \")[1];\n          dispatch(completeLogin(token));\n        }\n        return super.handleApiResponse(dispatch, response);\n      case HttpStatus.NO_CONTENT:\n        return Promise.resolve(\"Successfully logged out.\");\n      case HttpStatus.UNAUTHORIZED:\n        return Promise.reject(\"Invalid credentials.\");\n      default:\n        super.handleApiResponse(dispatch, response);\n    }\n\n    return super.handleApiResponse(dispatch, response);\n  }\n}\n"]}