{"version":3,"sources":["../src/auth/actions/api/adapters/GraphQLApiAdapter.ts"],"names":[],"mappings":";;AAAA,+CAAiD;AAIjD,6CAAyE;AAoBzE,MAAa,iBAAiB;IAuC5B,YAAY,SAA4B,IAAI,sBAAY,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;QAIvE,2BAAsB,GAAG,CAC9B,QAAgB,EAChB,WAAmB,EACnB,QAAsB,EACtB,UAA2B,EAC3B,EAAE;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBACxB,QAAQ,EAAE,kBAAG,CAAA;;kCAEe,QAAQ,oBAAoB,WAAW;;;;;;;;;;;OAWlE;aACF,CAAC,CAAC,IAAI,CAAC,CAAC,QAAoC,EAAE,EAAE;gBAC/C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;gBAC5E,IAAI,QAAQ,IAAI,IAAI,EAAE;oBACpB,OAAO,OAAO,CAAC,MAAM,CAAC,sDAAsD,CAAC,CAAC;iBAC/E;gBAED,QAAQ,CAAC,wBAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxD,QAAQ,CAAC,mCAAwB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7F,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;QAEM,WAAM,GAAG,GAAG,EAAE;YACnB,OAAO,CAAC,KAAK,CAAC,gEAAgE,CAAC,CAAC;YAChF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAA;QAtCC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAxCM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE;YAChC,iBAAiB,CAAC,SAAS,GAAG,IAAI,iBAAiB,EAAE,CAAC;SACvD;QAED,OAAO,iBAAiB,CAAC,SAAS,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,8BAA8B,CAAC,QAAoC;QAC/E,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,EAAE;YACvG,OAAO,IAAI,CAAC;SACb;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IACxC,CAAC;IAEM,MAAM,CAAC,0BAA0B,CAAC,QAAoC;QAC3E,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE;YACxG,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;QAE/C,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;YAClB,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK;YAC7B,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,SAAS;YACrC,QAAQ,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ;YACnC,SAAS,EAAE;gBACT,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,OAAO;aAClC;SACF,CAAC;IACJ,CAAC;CA8CF;AA/ED,8CA+EC","file":"../../../../../auth/actions/api/adapters/GraphQLApiAdapter.js","sourcesContent":["import ApolloClient, { gql } from \"apollo-boost\";\n\nimport { IUser } from \"../../../../app/types\";\nimport { IAuthInnerState } from \"../../../model\";\nimport { completeLogin, successfulGetUserDetails } from \"../../creators\";\nimport { AuthDispatch, IAuthApiAdapter } from \"../../types\";\n\n// TODO: The shape of this interface may need to change to support varying\n// scopes and multiple providers\ninterface IGraphQLSocialAuthResponse {\n  data: {\n    socialAuth: {\n      social: {\n        uid: string;\n        extraData: {[key: string]: any}\n        user: {\n          id: string;\n        }\n      };\n      token: string;\n    };\n  };\n}\n\nexport class GraphQLApiAdapter implements IAuthApiAdapter {\n  public static getInstance(): GraphQLApiAdapter {\n    if (!GraphQLApiAdapter.singleton) {\n      GraphQLApiAdapter.singleton = new GraphQLApiAdapter();\n    }\n\n    return GraphQLApiAdapter.singleton;\n  }\n\n  public static jwtTokenFromSocialAuthResponse(response: IGraphQLSocialAuthResponse): string {\n    if (response.data == null || response.data.socialAuth == null || response.data.socialAuth.token == null) {\n      return null;\n    }\n\n    return response.data.socialAuth.token;\n  }\n\n  public static userFromSocialAuthResponse(response: IGraphQLSocialAuthResponse): IUser {\n    if (response.data == null || response.data.socialAuth == null || response.data.socialAuth.social == null) {\n      return null;\n    }\n\n    const social = response.data.socialAuth.social;\n\n    return {\n      id: social.user.id,\n      email: social.extraData.email,\n      firstName: social.extraData.firstName,\n      lastName: social.extraData.lastName,\n      extraData: {\n        picture: social.extraData.picture,\n      },\n    };\n  }\n\n  private static singleton: GraphQLApiAdapter;\n\n  private client: ApolloClient<any>;\n\n  constructor(client: ApolloClient<any> = new ApolloClient({ uri: \"/graphql/\" })) {\n    this.client = client;\n  }\n\n  public socialLoginAccessToken = (\n    provider: string,\n    accessToken: string,\n    dispatch: AuthDispatch,\n    _authState: IAuthInnerState,\n  ) => {\n    return this.client.mutate({\n      mutation: gql`\n        mutation {\n          socialAuth(provider: \"${provider}\", accessToken: \"${accessToken}\") {\n            social {\n              uid\n              extraData\n              user {\n                id\n              }\n            }\n            token\n          }\n        }\n      `,\n    }).then((response: IGraphQLSocialAuthResponse) => {\n      const jwtToken = GraphQLApiAdapter.jwtTokenFromSocialAuthResponse(response);\n      if (jwtToken == null) {\n        return Promise.reject(\"An error occurred during the authentication process.\");\n      }\n\n      dispatch(completeLogin(response.data.socialAuth.token));\n      dispatch(successfulGetUserDetails(GraphQLApiAdapter.userFromSocialAuthResponse(response)));\n    });\n  }\n\n  public logout = () => {\n    console.error(\"Logout is not yet implemented on GraphQLApiAdapter for AuthApi\");\n    return Promise.resolve();\n  }\n}\n"]}