{"version":3,"sources":["../src/auth/actions/api/adapters/RestApiAdapter.ts"],"names":[],"mappings":"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","file":"../../../../../auth/actions/api/adapters/RestApiAdapter.js","sourcesContent":["import { RestClient } from \"../../../../api/clients/RestClient\";\nimport { IJwtUserResponse, IUser } from \"../../../../app/types\";\nimport { AuthRestClient } from \"../../../clients/AuthRestClient\";\nimport { IAuthInnerState } from \"../../../model\";\nimport { completeLogin, successfulGetUserDetails } from \"../../creators\";\nimport { completeLogoutAndRedirect } from \"../../thunks\";\nimport { AuthDispatch, IAuthApiAdapter } from \"../../types\";\n\nexport class RestApiAdapter implements IAuthApiAdapter {\n  public static getInstance(): RestApiAdapter {\n    if (!RestApiAdapter.singleton) {\n      RestApiAdapter.singleton = new RestApiAdapter();\n    }\n\n    return RestApiAdapter.singleton;\n  }\n\n  private static singleton: RestApiAdapter;\n\n  private static userFromJwtUserResponse(response: IJwtUserResponse): IUser {\n    return {\n      id: response.id,\n      username: response.username,\n      email: response.email,\n      firstName: response.firstName,\n      lastName: response.lastName,\n    };\n  }\n\n  private client: RestClient;\n\n  constructor(client: RestClient = new AuthRestClient()) {\n    this.client = client;\n  }\n\n  public login = (username: string, password: string, dispatch: AuthDispatch, authState: IAuthInnerState) => {\n    const innerPayload = authState.useEmailAsUsername\n      ? { email: username, password }\n      : { username, password };\n\n    // Some auth systems expect parameters in the form:\n    // {\n    //   user: {\n    //     email: test@test.com\n    //     password: testtest\n    //   }\n    // }\n    const payload = authState.wrapParameters\n      ? { user: innerPayload }\n      : innerPayload;\n    return this.client.postRequest(\"/api/login/username/jwt/\", payload, dispatch, null)\n      .then((response: IJwtUserResponse) => {\n        if (response) {\n          if (response.token) {\n            dispatch(completeLogin(response.token));\n          }\n          if (response.email) {\n            const user = RestApiAdapter.userFromJwtUserResponse(response);\n            dispatch(successfulGetUserDetails(user));\n          } else {\n            // TODO: Should really fix the Django server so that it returns the user details\n            // with the tokens--that would allow elimination of this branching code path.\n            // Have to grab new state because we've just updated through dispatch, in theory\n            const token = authState.token;\n            return this.client.getRequest(\"/api/users/me/\", null, dispatch, token)\n            .then((userDetailsResponse: IUser) => {\n              dispatch(successfulGetUserDetails(userDetailsResponse));\n            });\n          }\n        }\n      });\n  }\n\n  public socialLogin = (provider: string, code: string, redirectUri: string, dispatch: AuthDispatch, authState: IAuthInnerState) => {\n    const payload = {\n      provider,\n      code,\n      redirect_uri: redirectUri,\n    };\n    return this.client.postRequest(\"/api/login/social/jwt_user/\", payload, dispatch, authState.token)\n      .then((response: IJwtUserResponse) => {\n        const user = RestApiAdapter.userFromJwtUserResponse(response);\n        dispatch(completeLogin(response.token));\n        dispatch(successfulGetUserDetails(user));\n      });\n  }\n\n  public logout = (dispatch: AuthDispatch, authState: IAuthInnerState) => {\n    return this.client.deleteRequest(\"/api/logout/jwt/\", dispatch, authState.token)\n    .then(() => {\n      dispatch(completeLogoutAndRedirect());\n    });\n  }\n}\n"]}