{"version":3,"sources":["../src/auth/actions/types.ts"],"names":[],"mappings":";;AAMA,MAAM,SAAS,GAAiC,EAAE,CAAC;AAEnD,SAAS,IAAI,CAAI,KAAa;IAC5B,IAAI,SAAS,CAAC,KAAe,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,gBAAgB,KAAK,iBAAiB,CAAC,CAAC;KACzD;IAED,SAAS,CAAC,KAAe,CAAC,GAAG,IAAI,CAAC;IAElC,OAAO,KAAU,CAAC;AACpB,CAAC;AAEY,QAAA,WAAW,GAAG;IACzB,WAAW,EAAE,IAAI,CAAgB,aAAa,CAAC;IAC/C,cAAc,EAAE,IAAI,CAAmB,gBAAgB,CAAC;IACxD,2BAA2B,EAAE,IAAI,CAAgC,6BAA6B,CAAC;IAC/F,UAAU,EAAE,IAAI,CAAe,YAAY,CAAC;IAC5C,YAAY,EAAE,IAAI,CAAiB,cAAc,CAAC;IAClD,eAAe,EAAE,IAAI,CAAoB,iBAAiB,CAAC;IAC3D,YAAY,EAAE,IAAI,CAAiB,cAAc,CAAC;IAClD,cAAc,EAAE,IAAI,CAAmB,gBAAgB,CAAC;CACzD,CAAC","file":"../../../auth/actions/types.js","sourcesContent":["import { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\nimport { IUser } from \"../../app/types\";\nimport { IAuthState, IAuthInnerState } from \"../model\";\n\nconst typeCache: { [label: string]: boolean } = {};\n\nfunction type<T>(label: T | \"\"): T {\n  if (typeCache[label as string]) {\n    throw new Error(`Action type \"${label}\" is not unique`);\n  }\n\n  typeCache[label as string] = true;\n\n  return label as T;\n}\n\nexport const ActionTypes = {\n  START_LOGIN: type<\"START_LOGIN\">(\"START_LOGIN\"),\n  COMPLETE_LOGIN: type<\"COMPLETE_LOGIN\">(\"COMPLETE_LOGIN\"),\n  SUCCESSFUL_GET_USER_DETAILS: type<\"SUCCESSFUL_GET_USER_DETAILS\">(\"SUCCESSFUL_GET_USER_DETAILS\"),\n  FAIL_LOGIN: type<\"FAIL_LOGIN\">(\"FAIL_LOGIN\"),\n  START_LOGOUT: type<\"START_LOGOUT\">(\"START_LOGOUT\"),\n  COMPLETE_LOGOUT: type<\"COMPLETE_LOGOUT\">(\"COMPLETE_LOGOUT\"),\n  SET_REDIRECT: type<\"SET_REDIRECT\">(\"SET_REDIRECT\"),\n  CLEAR_REDIRECT: type<\"CLEAR_REDIRECT\">(\"CLEAR_REDIRECT\"),\n};\n\nexport interface ICompleteLogin extends Action {\n  token: string;\n}\n\nexport interface ISuccessfulGetUserDetails extends Action {\n  user: IUser;\n}\n\nexport interface IFailLogin extends Action {\n  error: string;\n}\n\nexport interface ISetRedirect extends Action {\n  redirectPath: string;\n}\n\nexport declare type AuthAction = Action | ICompleteLogin | ISuccessfulGetUserDetails | IFailLogin | ISetRedirect;\nexport declare type AuthDispatch = ThunkDispatch<IAuthState, void, AuthAction>;\n\nexport interface IAuthApiAdapter {\n  login?: (username: string, password: string, dispatch: AuthDispatch, authState: IAuthInnerState) => Promise<any>;\n  socialLogin?: (provider: string, code: string, redirectUri: string, dispatch: AuthDispatch, authState: IAuthInnerState) => Promise<any>;\n  socialLoginAccessToken?: (provider: string, accessToken: string, dispatch: AuthDispatch, authState: IAuthInnerState) => Promise<any>;\n  logout: (dispatch: AuthDispatch, authState: IAuthInnerState) => Promise<any>;\n}\n"]}