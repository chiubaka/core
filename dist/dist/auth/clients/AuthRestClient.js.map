{"version":3,"sources":["../src/auth/clients/AuthRestClient.ts"],"names":[],"mappings":";;AAAA,gDAAgD;AAEhD,6DAAyE;AACzE,kDAA+D;AAG/D,MAAa,cAAe,SAAQ,uBAAU;IAC5C,+EAA+E;IAC/E,0EAA0E;IAC1E,iFAAiF;IACjF,oCAAoC;IAC7B,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;YACjC,cAAc,CAAC,aAAa,GAAG,IAAI,cAAc,EAAE,CAAC;SACrD;QAED,OAAO,cAAc,CAAC,aAAa,CAAC;IACtC,CAAC;IAIS,gBAAgB,CAAC,IAAY,EAAE,MAAqB;QAC5D,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;IAChD,CAAC;IAES,yBAAyB,CAAC,MAAc,EAAE,QAAkB;QACpE,KAAK,CAAC,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClD,QAAQ,CAAC,oBAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9B,CAAC;IAES,iBAAiB,CAAI,QAAkB,EAAE,QAAkB;QACnE,QAAQ,QAAQ,CAAC,MAAM,EAAE;YACvB,KAAK,UAAU,CAAC,EAAE,CAAC;YACnB,KAAK,UAAU,CAAC,OAAO;gBACrB,uEAAuE;gBACvE,MAAM,mBAAmB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAClE,IAAI,mBAAmB,KAAK,IAAI,EAAE;oBAChC,MAAM,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChD,QAAQ,CAAC,wBAAa,CAAC,KAAK,CAAC,CAAC,CAAC;iBAChC;gBACD,OAAO,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACrD,KAAK,UAAU,CAAC,UAAU;gBACxB,OAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YACrD,KAAK,UAAU,CAAC,YAAY;gBAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;YAChD;gBACE,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC/C;QAED,OAAO,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACrD,CAAC;CACF;AA7CD,wCA6CC","file":"../../../auth/clients/AuthRestClient.js","sourcesContent":["import * as HttpStatus from \"http-status-codes\";\n\nimport { IRestApiError, RestClient } from \"../../api/clients/RestClient\";\nimport { completeLogin, failLogin } from \"../actions/creators\";\nimport { AuthDispatch as Dispatch } from \"../actions/types\";\n\nexport class AuthRestClient extends RestClient {\n  // TODO: Some code smell here around having to rename the singleton private var\n  // Had to do this because apparently otherwise the type conflicts with the\n  // super class... and then I was concerned that I'd accidentally get one instance\n  // between this class and the super.\n  public static getInstance() {\n    if (!AuthRestClient.authSingleton) {\n      AuthRestClient.authSingleton = new AuthRestClient();\n    }\n\n    return AuthRestClient.authSingleton;\n  }\n\n  private static authSingleton: AuthRestClient;\n\n  protected errorTransformer(_url: string, _error: IRestApiError): Promise<string> {\n    return Promise.reject(\"Invalid credentials.\");\n  }\n\n  protected handleUnsuccessfulRequest(reason: string, dispatch: Dispatch) {\n    super.handleUnsuccessfulRequest(reason, dispatch);\n    dispatch(failLogin(reason));\n  }\n\n  protected handleApiResponse<T>(dispatch: Dispatch, response: Response): Promise<T | string> {\n    switch (response.status) {\n      case HttpStatus.OK:\n      case HttpStatus.CREATED:\n        // Handle pulling the JWT token out of the headers if it appears there.\n        const authorizationHeader = response.headers.get(\"Authorization\");\n        if (authorizationHeader !== null) {\n          const token = authorizationHeader.split(\" \")[1];\n          dispatch(completeLogin(token));\n        }\n        return super.handleApiResponse(dispatch, response);\n      case HttpStatus.NO_CONTENT:\n        return Promise.resolve(\"Successfully logged out.\");\n      case HttpStatus.UNAUTHORIZED:\n        return Promise.reject(\"Invalid credentials.\");\n      default:\n        super.handleApiResponse(dispatch, response);\n    }\n\n    return super.handleApiResponse(dispatch, response);\n  }\n}\n"]}