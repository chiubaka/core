{"version":3,"sources":["../src/auth/components/AuthenticatedContainer.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,6CAAsC;AACtC,uDAAmE;AACnE,sEAAsE;AAetE,MAAM,0BAA2B,SAAQ,KAAK,CAAC,SAA2C;IAKjF,kBAAkB;QACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,yBAAyB,CAAC,SAAuC;QACtE,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC9C,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;SACrC;IACH,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACzB,OAAO,CACL,6BAAK,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,IACpD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAChB,CACP,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAEO,mBAAmB,CAAC,KAAmC;QAC7D,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACrB,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;SACjG;IACH,CAAC;;AA/Ba,uCAAY,GAA0C;IAClE,SAAS,EAAE,aAAa;CACzB,CAAC;AAgCJ,SAAS,eAAe,CAAuB,KAAQ;IACrD,OAAO;QACL,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,KAAK,gCAAU,CAAC,WAAW,CAAC;KAChE,CAAC;AACJ,CAAC;AAEY,QAAA,sBAAsB,GAAG,qBAAO,CAC3C,eAAe,CAChB,CAAC,6BAAU,CAA+B,0BAA0B,CAAC,CAAC,CAAC","file":"../../../auth/components/AuthenticatedContainer.js","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { IAuthState, LoginState } from \"../model/AuthenticationState\";\n\nexport interface IAuthenticatedContainerStateProps {\n  isLoggedIn: boolean;\n}\n\nexport interface IAuthenticatedContainerOwnProps {\n  id?: string;\n  className?: string;\n  loginPath?: string;\n}\n\nexport interface IAuthenticatedContainerProps extends RouteComponentProps<any>, IAuthenticatedContainerStateProps,\n  IAuthenticatedContainerOwnProps {}\n\nclass AuthenticatedContainerImpl extends React.Component<IAuthenticatedContainerProps, {}> {\n  public static defaultProps: Partial<IAuthenticatedContainerProps> = {\n    loginPath: \"/auth/login\",\n  };\n\n  public componentWillMount() {\n    this.checkAuthentication(this.props);\n  }\n\n  public componentWillReceiveProps(nextProps: IAuthenticatedContainerProps) {\n    if (nextProps.location !== this.props.location) {\n      this.checkAuthentication(nextProps);\n    }\n  }\n\n  public render(): JSX.Element {\n    if (this.props.isLoggedIn) {\n      return (\n        <div id={this.props.id} className={this.props.className}>\n          {this.props.children}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private checkAuthentication(props: IAuthenticatedContainerProps) {\n    const { history } = props;\n    if (!props.isLoggedIn) {\n      history.replace({ pathname: props.loginPath, state: { redirectPath: props.location.pathname }});\n    }\n  }\n}\n\nfunction mapStateToProps<S extends IAuthState>(state: S): IAuthenticatedContainerStateProps {\n  return {\n    isLoggedIn: !(state.auth.loginState === LoginState.NotLoggedIn),\n  };\n}\n\nexport const AuthenticatedContainer = connect(\n  mapStateToProps,\n)(withRouter<IAuthenticatedContainerProps>(AuthenticatedContainerImpl));\n"]}