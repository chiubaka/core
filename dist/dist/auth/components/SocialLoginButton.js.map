{"version":3,"sources":["../src/auth/components/SocialLoginButton.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,6CAAsC;AAEtC,sEAAoG;AACpG,sCAAsD;AAYtD,MAAM,qBAAsB,SAAQ,KAAK,CAAC,SAAkC;IAYnE,MAAM;QACX,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;QAEtD,OAAO,CACL,2BACE,SAAS,EAAE,gCAAgC,YAAY,EAAE,EACzD,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YAE/B,8BAAM,SAAS,EAAE,SAAS,YAAY,EAAE,GAAG;;YAC7B,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CACjE,CACL,CAAC;IACJ,CAAC;;AAvBa,qCAAe,GAAiC;IAC5D,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,8CAA8C;CACvD,CAAC;AAEF,4GAA4G;AAC5G,sGAAsG;AACxF,2CAAqB,GAAiC;IAClE,MAAM,EAAE,eAAe;CACxB,CAAC;AAiBJ,SAAS,eAAe,CAAC,KAAiC,EACjC,QAAoC;IAC3D,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACnC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAC;IAE1D,IAAI,CAAC,CAAC,YAAY,IAAI,qBAAqB,CAAC,eAAe,CAAC,EAAE;QAC5D,OAAO,CAAC,KAAK,CAAC,qCAAqC,YAAY,GAAG,CAAC,CAAC;KACrE;IAED,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;IACjD,MAAM,sBAAsB,GAAG,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC;IACjE,MAAM,aAAa,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAEhF,MAAM,aAAa,GAAG,qBAAqB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAE1E,IAAI,SAAS,GAAG,GAAG,aAAa,cAAc,QAAQ,kBAAkB,YAAY,EAAE,CAAC;IACvF,IAAI,QAAQ,CAAC,KAAK,IAAI,IAAI,EAAE;QAC1B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvC,SAAS,GAAG,GAAG,SAAS,UAAU,KAAK,EAAE,CAAC;KAC3C;IAED,IAAI,YAAY,KAAK,wCAAkB,CAAC,IAAI,EAAE;QAC5C,MAAM,WAAW,GAAG,4BAAsB,CACxC,QAAQ,EACR,sBAAsB,EACtB,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,EAC5C,IAAI,EACJ,MAAM,CACP,CAAC;QAEF,SAAS,GAAG,GAAG,SAAS,iBAAiB,WAAW,EAAE,CAAC;KACxD;IAED,OAAO;QACL,SAAS;KACV,CAAC;AACJ,CAAC;AAEY,QAAA,iBAAiB,GAAG,qBAAO,CAAC,eAAe,CAAC,CAAC,qBAAqB,CAAC,CAAC","file":"../../../auth/components/SocialLoginButton.js","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IServiceState } from \"../../app/model/index\";\nimport { IAuthState, ISocialLoginProvider, OAuth2ResponseType } from \"../model/AuthenticationState\";\nimport { buildOAuth2CallbackUri } from \"../utils/uri\";\n\nexport interface ISocialLoginButtonOwnProps {\n  provider: ISocialLoginProvider;\n}\n\nexport interface ISocialLoginButtonStateProps {\n  oAuth2Uri: string;\n}\n\nexport interface ISocialLoginButtonProps extends ISocialLoginButtonOwnProps, ISocialLoginButtonStateProps {}\n\nclass SocialLoginButtonImpl extends React.Component<ISocialLoginButtonProps> {\n  public static OAUTH2_GATEWAYS: {[provider: string]: string} = {\n    facebook: \"https://www.facebook.com/v3.3/dialog/oauth\",\n    google: \"https://accounts.google.com/o/oauth2/v2/auth\",\n  };\n\n  // Provides provider providerName aliases as shims since social-app-django differentiates between Google and\n  // Google OAuth2. We don't support anything other than OAuth2, so internally there's no need for that.\n  public static OAUTH2_PROVIDER_ALIAS: {[provider: string]: string} = {\n    google: \"google-oauth2\",\n  };\n\n  public render(): JSX.Element {\n    const providerName = this.props.provider.providerName;\n\n    return (\n      <a\n        className={`btn btn-block btn-social btn-${providerName}`}\n        href={`${this.props.oAuth2Uri}`}\n      >\n        <span className={`fa fa-${providerName}`}/>\n        Sign in with {providerName[0].toUpperCase() + providerName.slice(1)}\n      </a>\n    );\n  }\n}\n\nfunction mapStateToProps(state: IAuthState & IServiceState,\n                         ownProps: ISocialLoginButtonOwnProps): ISocialLoginButtonStateProps {\n  const provider = ownProps.provider;\n  const { clientId, providerName, responseType } = provider;\n\n  if (!(providerName in SocialLoginButtonImpl.OAUTH2_GATEWAYS)) {\n    console.error(`Unrecognized social auth provider ${providerName}.`);\n  }\n\n  const { hostname, port, useSsl } = state.service;\n  const oAuth2CallbackBasePath = state.auth.oAuth2CallbackBasePath;\n  const providerAlias = SocialLoginButtonImpl.OAUTH2_PROVIDER_ALIAS[providerName];\n\n  const oAuth2Gateway = SocialLoginButtonImpl.OAUTH2_GATEWAYS[providerName];\n\n  let oAuth2Uri = `${oAuth2Gateway}?client_id=${clientId}&response_type=${responseType}`;\n  if (provider.scope != null) {\n    const scope = provider.scope.join(\" \");\n    oAuth2Uri = `${oAuth2Uri}&scope=${scope}`;\n  }\n\n  if (responseType === OAuth2ResponseType.Code) {\n    const redirectUri = buildOAuth2CallbackUri(\n      hostname,\n      oAuth2CallbackBasePath,\n      providerAlias ? providerAlias : providerName,\n      port,\n      useSsl,\n    );\n\n    oAuth2Uri = `${oAuth2Uri}&redirect_uri=${redirectUri}`;\n  }\n\n  return {\n    oAuth2Uri,\n  };\n}\n\nexport const SocialLoginButton = connect(mapStateToProps)(SocialLoginButtonImpl);\n"]}