{"version":3,"sources":["../src/auth/pages/OAuth2CompletionPage/OAuth2CompletionPage.tsx"],"names":[],"mappings":"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","file":"../../../../auth/pages/OAuth2CompletionPage/OAuth2CompletionPage.js","sourcesContent":["import { parse, ParsedQuery } from \"query-string\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { ProgressBar } from \"../../../app/components/ProgressBar\";\nimport { IServiceInnerState, IServiceState } from \"../../../app/model\";\nimport { AuthApi, AuthDispatch as Dispatch, clearRedirect } from \"../../actions\";\nimport { IAuthState, LoginState, OAuth2ResponseType, ISocialLoginProvider } from \"../../model/AuthenticationState\";\nimport { buildOAuth2CallbackUri } from \"../../utils/uri\";\n\nexport interface IOAuth2CompletionPageParams {\n  provider: string;\n}\n\nexport interface IOAuth2CompletionPageStateProps extends IServiceInnerState {\n  loggedIn: boolean;\n  oAuth2CallbackBasePath: string;\n  redirectPath: string;\n  providers: ISocialLoginProvider[];\n}\n\nexport interface IOAuth2CompletionPageDispatchProps {\n  clearRedirect: () => void;\n  socialLogin: (provider: string, code: string, redirectUri: string) => void;\n  socialLoginAccessToken: (provider: string, token: string) => void;\n}\n\nexport interface IOAuth2CompletionPageMergeProps {\n  onOAuth2Completion: (provider: string, queryParams: ParsedQuery) => void;\n}\n\nexport interface IOAuth2CompletionPageProps extends \n  RouteComponentProps<IOAuth2CompletionPageParams>,\n  IOAuth2CompletionPageMergeProps {\n    loggedIn: boolean;\n    redirectPath: string;\n    clearRedirect: () => void;\n  }\n\nexport function buildOAuth2CompletionPage(api: AuthApi) {\n  class OAuth2CompletionPage extends React.Component<IOAuth2CompletionPageProps> {\n    public componentWillMount() {\n      this.handleOAuth2AndRedirect(this.props);\n    }\n\n    public componentWillReceiveProps(nextProps: IOAuth2CompletionPageProps) {\n      this.handleOAuth2AndRedirect(nextProps);\n    }\n\n    public render(): JSX.Element {\n      return (\n        <div className=\"oauth2-completion container d-table\">\n          <div className=\"d-table-cell align-middle\">\n            <ProgressBar progress={100} striped={true} animated={true}/>\n          </div>\n        </div>\n      );\n    }\n\n    // If not logged in, this will trigger the login.\n    // Once the user is logged in, the redux state should change, so new props\n    // will be passed and this component should re-render, sparking the redirect\n    // path.\n    private handleOAuth2AndRedirect(props: IOAuth2CompletionPageProps) {\n      const queryParams = parse(props.location.hash);\n      console.log(props);\n      if (!props.loggedIn) {\n        console.log(\"Not logged in\");\n        // TODO: Need to handle case where user is not logged in but login failed.\n        const provider = props.match.params.provider;\n\n        props.onOAuth2Completion(provider, queryParams);\n      } else {\n        console.log(\"logged in!\");\n        props.clearRedirect();\n        // TODO: Should not be \"/\" here, should be a parameterized default path\n        props.history.replace(props.redirectPath ? props.redirectPath : \"/\");\n      }\n    }\n  }\n\n  function mapStateToProps(state: IAuthState & IServiceState): IOAuth2CompletionPageStateProps {\n    return {\n      hostname: state.service.hostname,\n      loggedIn: state.auth.loginState === LoginState.LoggedIn,\n      oAuth2CallbackBasePath: state.auth.oAuth2CallbackBasePath,\n      port: state.service.port,\n      useSsl: state.service.useSsl,\n      redirectPath: state.auth.redirectPath,\n      providers: state.auth.socialProviders,\n    };\n  }\n\n  function mapDispatchToProps(dispatch: Dispatch): IOAuth2CompletionPageDispatchProps {\n    return {\n      clearRedirect: () => {\n        dispatch(clearRedirect());\n      },\n      socialLogin: (provider: string, code: string, oAuth2CallbackUri: string) => {\n        dispatch(api.socialLogin(provider, code, oAuth2CallbackUri));\n      },\n      socialLoginAccessToken: (provider: string, token: string) => {\n        dispatch(api.socialLoginAccessToken(provider, token));\n      },\n    };\n  }\n\n  function mergeProps(stateProps: IOAuth2CompletionPageStateProps, dispatchProps: IOAuth2CompletionPageDispatchProps) {\n    return {\n      clearRedirect: dispatchProps.clearRedirect,\n      loggedIn: stateProps.loggedIn,\n      onOAuth2Completion: (providerName: string, queryParams: ParsedQuery) => {\n        const provider = stateProps.providers.find((p) => p.providerName === providerName);\n\n        switch (provider.responseType) {\n          case (OAuth2ResponseType.Token): {\n            return dispatchProps.socialLoginAccessToken(providerName, queryParams.access_token as string);\n          }\n          case (OAuth2ResponseType.Code):\n          default: {\n            const { hostname, oAuth2CallbackBasePath, port, useSsl } = stateProps;\n            const oAuth2CallbackUri = buildOAuth2CallbackUri(\n              hostname,\n              oAuth2CallbackBasePath,\n              providerName,\n              port,\n              useSsl,\n            );\n\n            return dispatchProps.socialLogin(providerName, queryParams.code as string, oAuth2CallbackUri);\n          }\n        }\n      },\n      redirectPath: stateProps.redirectPath,\n    };\n  }\n\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps,\n  )(withRouter<IOAuth2CompletionPageProps>(OAuth2CompletionPage) as any);\n}\n"]}