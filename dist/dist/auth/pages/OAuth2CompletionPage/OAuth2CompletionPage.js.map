{"version":3,"sources":["../src/auth/pages/OAuth2CompletionPage/OAuth2CompletionPage.tsx"],"names":[],"mappings":";;AAAA,+CAAqC;AACrC,+BAA+B;AAC/B,6CAAsC;AACtC,uDAAmE;AAEnE,qEAAkE;AAClE,2CAAiF;AACjF,yEAAyE;AACzE,yCAAyD;AAoBzD,MAAM,oBAAqB,SAAQ,KAAK,CAAC,SAAqC;IACrE,kBAAkB;QACvB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAEM,yBAAyB,CAAC,SAAqC;QACpE,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM;QACX,OAAO,CACL,6BAAK,SAAS,EAAC,qCAAqC;YAClD,6BAAK,SAAS,EAAC,2BAA2B;gBACxC,oBAAC,yBAAW,IAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,GAAG,CACxD,CACF,CACP,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAAC,KAAiC;QAC/D,MAAM,WAAW,GAAG,oBAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAE9B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACnB,0EAA0E;YAC1E,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;YAE7C,MAAM,EAAE,sBAAsB,EAAE,GAAG,KAAK,CAAC;YACzC,MAAM,iBAAiB,GAAG,4BAAsB,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;YAEnF,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,IAAc,EAAE,iBAAiB,CAAC,CAAC;SACvE;aAAM;YACL,KAAK,CAAC,aAAa,EAAE,CAAC;YACtB,uEAAuE;YACvE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACtE;IACH,CAAC;CACF;AAED,SAAS,eAAe,CAAC,KAAiB;IACxC,OAAO;QACL,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,KAAK,gCAAU,CAAC,QAAQ;QACvD,sBAAsB,EAAE,KAAK,CAAC,IAAI,CAAC,sBAAsB;QACzD,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,YAAY;KACtC,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,QAAkB;IAC5C,OAAO;QACL,aAAa,EAAE,GAAG,EAAE;YAClB,QAAQ,CAAC,uBAAa,EAAE,CAAC,CAAC;QAC5B,CAAC;QACD,kBAAkB,EAAE,CAAC,QAAgB,EAAE,IAAY,EAAE,iBAAyB,EAAE,EAAE;YAChF,QAAQ,CAAC,iBAAO,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACjF,CAAC;KACF,CAAC;AACJ,CAAC;AAED,kBAAe,qBAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,6BAAU,CAA6B,oBAAoB,CAAC,CAAC,CAAC","file":"../../../../auth/pages/OAuth2CompletionPage/OAuth2CompletionPage.js","sourcesContent":["import { parse } from \"query-string\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { ProgressBar } from \"../../../app/components/ProgressBar\";\nimport { AuthApi, AuthDispatch as Dispatch, clearRedirect } from \"../../actions\";\nimport { IAuthState, LoginState } from \"../../model/AuthenticationState\";\nimport { buildOAuth2CallbackUri } from \"../../utils/uri\";\n\nexport interface IOAuth2CompletionPageParams {\n  provider: string;\n}\n\nexport interface IOAuth2CompletionPageStateProps {\n  loggedIn: boolean;\n  oAuth2CallbackBasePath: string;\n  redirectPath: string;\n}\n\nexport interface IOAuth2CompletionPageDispatchProps {\n  clearRedirect: () => void;\n  onOAuth2Completion: (provider: string, code: string, redirectUri: string) => void;\n}\n\nexport interface IOAuth2CompletionPageProps extends RouteComponentProps<IOAuth2CompletionPageParams>,\n  IOAuth2CompletionPageStateProps, IOAuth2CompletionPageDispatchProps {}\n\nclass OAuth2CompletionPage extends React.Component<IOAuth2CompletionPageProps> {\n  public componentWillMount() {\n    this.handleOAuth2AndRedirect(this.props);\n  }\n\n  public componentWillReceiveProps(nextProps: IOAuth2CompletionPageProps) {\n    this.handleOAuth2AndRedirect(nextProps);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className=\"oauth2-completion container d-table\">\n        <div className=\"d-table-cell align-middle\">\n          <ProgressBar progress={100} striped={true} animated={true}/>\n        </div>\n      </div>\n    );\n  }\n\n  private handleOAuth2AndRedirect(props: IOAuth2CompletionPageProps) {\n    const queryParams = parse(props.location.search);\n    const code = queryParams.code;\n\n    if (!props.loggedIn) {\n      // TODO: Need to handle case where user is not logged in but login failed.\n      const provider = props.match.params.provider;\n\n      const { oAuth2CallbackBasePath } = props;\n      const oAuth2CallbackUri = buildOAuth2CallbackUri(oAuth2CallbackBasePath, provider);\n\n      props.onOAuth2Completion(provider, code as string, oAuth2CallbackUri);\n    } else {\n      props.clearRedirect();\n      // TODO: Should not be \"/\" here, should be a parameterized default path\n      props.history.replace(props.redirectPath ? props.redirectPath : \"/\");\n    }\n  }\n}\n\nfunction mapStateToProps(state: IAuthState): IOAuth2CompletionPageStateProps {\n  return {\n    loggedIn: state.auth.loginState === LoginState.LoggedIn,\n    oAuth2CallbackBasePath: state.auth.oAuth2CallbackBasePath,\n    redirectPath: state.auth.redirectPath,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): IOAuth2CompletionPageDispatchProps {\n  return {\n    clearRedirect: () => {\n      dispatch(clearRedirect());\n    },\n    onOAuth2Completion: (provider: string, code: string, oAuth2CallbackUri: string) => {\n      dispatch(AuthApi.getInstance().socialLogin(provider, code, oAuth2CallbackUri));\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withRouter<IOAuth2CompletionPageProps>(OAuth2CompletionPage));\n"]}