{"version":3,"sources":["../src/forms/components/ModelFormController.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,6CAAsC;AA4BtC,SAAgB,uBAAuB,CACrC,gBAAiF,EACjF,GAAqB,EACrB,oBAAqC,EAAE;IAEvC,MAAM,mBAAoB,SACxB,KAAK,CAAC,SAA+E;QACrF,YAAY,KAAwC;YAClD,KAAK,CAAC,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,KAAK,GAAG;gBACX,KAAK,oBAAM,iBAA2B,EAAK,KAAK,CAAC,KAAe,CAAC;aAClE,CAAC;YAEF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC;QAEM,MAAM;YACX,OAAO,CACL,oBAAC,gBAAgB,oBACX,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,KAAK,IACd,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,EAC3C,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,WAAW,EAAE,IAAI,CAAC,SAAS,IAC3B,CACH,CAAC;QACJ,CAAC;QAEO,gBAAgB,CAAC,KAAsB;YAC7C,IAAI,CAAC,QAAQ,mBACR,IAAI,CAAC,KAAK,IACb,KAAK,oBACA,IAAI,CAAC,KAAK,CAAC,KAAe,EAC1B,KAAe,KAEpB,CAAC;QACL,CAAC;QAEO,UAAU;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5E,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,SAAS;YACf,IAAI,CAAC,QAAQ,CAAC,EAAC,KAAK,EAAE,iBAAiB,EAAC,CAAC,CAAC;QAC5C,CAAC;KACF;IAED,SAAS,kBAAkB,CAAC,QAAkB;QAC5C,OAAO;YACL,QAAQ,EAAE,CAAC,QAAyB,EAAE,OAAwB,EAAE,EAAE;gBAChE,MAAM,OAAO,GAAoB,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAQ,CAAC;gBACxF,OAAO,OAAO,CAAC;YACjB,CAAC;SACF,CAAC;IACJ,CAAC;IAED,OAAO,qBAAO,CAIZ,IAAI,EAAE,kBAAkB,CAAC,CAAC,mBAA0B,CAAC,CAAC;AAC1D,CAAC;AAlED,0DAkEC","file":"../../../forms/components/ModelFormController.js","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n\nimport { IModel, ModelApi } from \"../../api\";\nimport { IModelFormProps } from \"../types\";\n\ndeclare type Dispatch = ThunkDispatch<any, void, any>;\n\nexport interface IModelFormControllerDispatchProps<T> {\n  onSubmit: (original: Partial<T>, updated: Partial<T>) => Promise<T>;\n}\n\nexport interface IModelFormControllerOwnProps<T> {\n  model?: Partial<T>;\n}\n\nexport interface IModelFormControllerProps<T> extends IModelFormControllerDispatchProps<T>,\n  IModelFormControllerOwnProps<T> {}\n\nexport interface IModelFormControllerState<T> {\n  model: Partial<T>;\n}\n\nexport interface IModelFormControllerComponentProps<T>  extends IModelFormProps<T> {\n  onSubmit: () => Promise<T>;\n  onFormReset: () => void;\n}\n\nexport function withModelFormController<TProps, TModel extends IModel, TOwnProps = TProps>(\n  WrappedComponent: React.ComponentType<IModelFormControllerComponentProps<TModel>>,\n  Api: ModelApi<TModel>,\n  defaultModelState: Partial<TModel> = {},\n) {\n  class ModelFormController extends\n    React.Component<IModelFormControllerProps<TModel>, IModelFormControllerState<TModel>> {\n    constructor(props: IModelFormControllerProps<TModel>) {\n      super(props);\n\n      this.state = {\n        model: {...defaultModelState as object, ...props.model as object},\n      };\n\n      this.updateModelState = this.updateModelState.bind(this);\n      this.submitForm = this.submitForm.bind(this);\n      this.resetForm = this.resetForm.bind(this);\n    }\n\n    public render(): JSX.Element {\n      return (\n        <WrappedComponent\n          {...this.props}\n          {...this.state}\n          onModelDetailsUpdate={this.updateModelState}\n          onSubmit={this.submitForm}\n          onFormReset={this.resetForm}\n        />\n      );\n    }\n\n    private updateModelState(model: Partial<TModel>) {\n      this.setState({\n        ...this.state,\n        model: {\n          ...this.state.model as object,\n          ...model as object,\n        },\n      });\n    }\n\n    private submitForm() {\n      return this.props.onSubmit(this.props.model, this.state.model).then((model) => {\n        return model;\n      });\n    }\n\n    private resetForm() {\n      this.setState({model: defaultModelState});\n    }\n  }\n\n  function mapDispatchToProps(dispatch: Dispatch): IModelFormControllerDispatchProps<TModel> {\n    return {\n      onSubmit: (original: Partial<TModel>, updated: Partial<TModel>) => {\n        const promise: Promise<TModel> = dispatch(Api.createOrUpdate(original, updated)) as any;\n        return promise;\n      },\n    };\n  }\n\n  return connect<\n    null,\n    IModelFormControllerDispatchProps<TModel>,\n    IModelFormControllerOwnProps<TModel> & TOwnProps\n  >(null, mapDispatchToProps)(ModelFormController as any);\n}\n"]}