{"version":3,"sources":["../src/marketing/components/MailChimpSubscribeForm/MailChimpSubscribeForm.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,6CAAsC;AAoBtC,MAAM,0BAA2B,SAAQ,KAAK,CAAC,SAAuC;IACpF,YAAY,KAAmC;QAC7C,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,QAAQ;QACb,wCAAwC;QACxC,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;YACtC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAC7B;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE;YAChC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,EAAC,cAAc,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAC,CAAC,CAAC;SACvF;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,kCAAkC,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE;gBACjC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,kCAAkC;aACvD,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,MAAM;QACX,MAAM,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QAE5D,OAAO,CACL;YACE,6BAAK,EAAE,EAAC,iBAAiB;gBACvB,8BACE,MAAM,EAAE,KAAK,QAAQ,0CAA0C,MAAM,WAAW,MAAM,EAAE,EACxF,MAAM,EAAC,MAAM,EACb,EAAE,EAAC,4BAA4B,EAC/B,IAAI,EAAC,4BAA4B,EACjC,SAAS,EAAC,UAAU,EACpB,MAAM,EAAC,QAAQ,EACf,UAAU,EAAE,IAAI;oBAEhB,6BAAK,EAAE,EAAC,wBAAwB,EAAC,SAAS,EAAC,YAAY;wBACrD,+BACE,IAAI,EAAC,OAAO,EACZ,IAAI,EAAC,OAAO,EACZ,SAAS,EAAC,oBAAoB,EAC9B,EAAE,EAAC,WAAW,EACd,WAAW,EAAC,qBAAqB,EACjC,QAAQ,EAAE,IAAI,GACd;wBACF,6BACE,KAAK,EAAE,EAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAC,iBAClC,MAAM;4BAElB,+BAAO,IAAI,EAAC,MAAM,EAAC,IAAI,EAAE,KAAK,MAAM,IAAI,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAC,EAAE,GAAE,CACtE,CACF;oBACN,gCACE,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,WAAW,EAChB,EAAE,EAAC,uBAAuB,EAC1B,SAAS,EAAC,oBAAoB,EAC9B,OAAO,EAAE,IAAI,CAAC,QAAQ,IAErB,YAAY,CACN,CACJ,CACH,CACF,CACP,CAAC;IACJ,CAAC;CACF;AAED,SAAS,eAAe,CAAC,KAAsB;IAC7C,OAAO,KAAK,CAAC,SAAS,CAAC;AACzB,CAAC;AAEY,QAAA,sBAAsB,GAAG,qBAAO,CAAC,eAAe,CAAC,CAAC,0BAA0B,CAAC,CAAC","file":"../../../../marketing/components/MailChimpSubscribeForm/MailChimpSubscribeForm.js","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IAnalyticsInnerState, IAnalyticsState } from \"../../../analytics/model/AnalyticsState\";\n\nexport interface IMailChimpSubscribeFormOwnProps {\n  username: string;\n  userId: string;\n  listId: string;\n  callToAction: string;\n}\n\nexport interface IMailChimpSubscribeFormProps extends IMailChimpSubscribeFormOwnProps, IAnalyticsInnerState {}\n\ndeclare global {\n  // tslint:disable-next-line:interface-name\n  interface Window {\n    fbq: (type: string, event: string, options?: any) => void;\n    gtag: (command: string, type: string, options?: any) => void;\n  }\n}\n\nclass MailChimpSubscribeFormImpl extends React.Component<IMailChimpSubscribeFormProps> {\n  constructor(props: IMailChimpSubscribeFormProps) {\n    super(props);\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  public onSubmit(): void {\n    // TODO: Re-enable metrics in production\n    if (this.props.enableFacebookAnalytics) {\n      window.fbq(\"track\", \"Lead\");\n    }\n    if (this.props.googleAnalyticsId) {\n      window.gtag(\"event\", \"click\", {event_category: \"button\", event_label: \"Beta SignUp\"});\n    }\n    if (this.props.googleEmailSignUpConversionEventId) {\n      window.gtag(\"event\", \"conversion\", {\n        send_to: this.props.googleEmailSignUpConversionEventId,\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {username, userId, listId, callToAction} = this.props;\n\n    return (\n      <div>\n        <div id=\"mc_embed_signup\">\n          <form\n            action={`//${username}.us16.list-manage.com/subscribe/post?u=${userId}&amp;id=${listId}`}\n            method=\"post\"\n            id=\"mc-embedded-subscribe-form\"\n            name=\"mc-embedded-subscribe-form\"\n            className=\"validate\"\n            target=\"_blank\"\n            noValidate={true}\n          >\n            <div id=\"mc_embed_signup_scroll\" className=\"form-group\">\n              <input\n                type=\"email\"\n                name=\"EMAIL\"\n                className=\"email form-control\"\n                id=\"mce-EMAIL\"\n                placeholder=\"Enter email address\"\n                required={true}\n              />\n              <div\n                style={{position: \"absolute\", left: \"-5000px\"}}\n                aria-hidden=\"true\"\n              >\n                <input type=\"text\" name={`b_${userId}_${listId}`} tabIndex={-1} value=\"\"/>\n              </div>\n            </div>\n            <button\n              type=\"submit\"\n              name=\"subscribe\"\n              id=\"mc-embedded-subscribe\"\n              className=\"btn call-to-action\"\n              onClick={this.onSubmit}\n            >\n              {callToAction}\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: IAnalyticsState): IAnalyticsInnerState {\n  return state.analytics;\n}\n\nexport const MailChimpSubscribeForm = connect(mapStateToProps)(MailChimpSubscribeFormImpl);\n"]}