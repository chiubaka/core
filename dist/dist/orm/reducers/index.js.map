{"version":3,"sources":["../src/orm/reducers/index.ts"],"names":[],"mappings":";;AAGA,wCAQoB;AAGpB,SAAgB,UAAU,CAAC,GAAQ;IACjC,OAAO,CAAC,WAA2B,GAAG,CAAC,aAAa,EAAE,EAAE,MAAmB,EAAE,EAAE;QAC7E,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,OAAO,OAAO,CAAC,KAAK,CAAC;SACtB;QAED,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,yBAAe,CAAC,YAAY,CAAC,CAAC;gBACjC,WAAW,CAAC,KAAK,EAAE,MAAsB,CAAC,CAAC;gBAC3C,MAAM;aACP;YACD,KAAK,yBAAe,CAAC,YAAY,CAAC,CAAC;gBACjC,WAAW,CAAC,KAAK,EAAE,MAAsB,CAAC,CAAC;gBAC3C,MAAM;aACP;YACD,KAAK,yBAAe,CAAC,aAAa,CAAC,CAAC;gBAClC,YAAY,CAAC,KAAK,EAAE,MAAwB,CAAC,CAAC;aAC/C;YACD,KAAK,yBAAe,CAAC,qBAAqB,CAAC,CAAC;gBAC1C,mBAAmB,CAAC,KAAK,EAAE,MAA8B,CAAC,CAAC;gBAC3D,MAAM;aACP;YACD,KAAK,yBAAe,CAAC,mBAAmB,CAAC,CAAC;gBACxC,iBAAiB,CAAC,KAAK,EAAE,MAAwB,CAAC,CAAC;gBACnD,MAAM;aACP;YACD,KAAK,yBAAe,CAAC,qBAAqB,CAAC,CAAC;gBAC1C,WAAW,CAAC,KAAK,EAAE,MAAsB,CAAC,CAAC;gBAC3C,MAAM;aACP;SACF;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;AACJ,CAAC;AApCD,gCAoCC;AAED,SAAS,QAAQ,CAAC,MAAc,EAAE,OAA0C;IAC1E,IAAI,uBAAa,CAAC,MAAM,CAAC,EAAE;QACzB,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KAClC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,WAAW,CAAC,KAAmB,EAAE,MAAoB;IAC5D,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,WAAW,CAAC,KAAmB,EAAE,MAAoB;IAC5D,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAC/B,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,YAAY,CAAC,KAAmB,EAAE,MAAsB;IAC/D,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AACnC,CAAC;AAED,SAAS,mBAAmB,CAAC,KAAmB,EAAE,MAA4B;IAC5E,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QACpC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,iBAAiB,CAAC,KAAmB,EAAE,MAAsB;IACpE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AAClD,CAAC","file":"../../../orm/reducers/index.js","sourcesContent":["import { Action } from \"redux\";\nimport { Model, ORM, ORMCommonState, SessionWithModels } from \"redux-orm\";\n\nimport {\n  IModelCreate,\n  IModelIdAction,\n  IModelUpdate,\n  isModelAction,\n  ISuccessfulListModel,\n  ModelAction,\n  ModelActionType,\n} from \"../actions\";\nimport { IModel } from \"../model\";\n\nexport function ormReducer(orm: ORM) {\n  return (database: ORMCommonState = orm.getEmptyState(), action: ModelAction) => {\n    const session = orm.session(database);\n    const model = getModel(action, session);\n    if (model == null) {\n      return session.state;\n    }\n\n    switch (action.type) {\n      case ModelActionType.CREATE_MODEL: {\n        createModel(model, action as IModelCreate);\n        break;\n      }\n      case ModelActionType.UPDATE_MODEL: {\n        updateModel(model, action as IModelUpdate);\n        break;\n      }\n      case ModelActionType.DESTROY_MODEL: {\n        destroyModel(model, action as IModelIdAction);\n      }\n      case ModelActionType.SUCCESSFUL_LIST_MODEL: {\n        successfulListModel(model, action as ISuccessfulListModel);\n        break;\n      }\n      case ModelActionType.START_SYNCING_MODEL: {\n        startSyncimgModel(model, action as IModelIdAction);\n        break;\n      }\n      case ModelActionType.SUCCESSFUL_SYNC_MODEL: {\n        updateModel(model, action as IModelUpdate);\n        break;\n      }\n    }\n\n    return session.state;\n  };\n}\n\nfunction getModel(action: Action, session: SessionWithModels<ORMCommonState>): typeof Model {\n  if (isModelAction(action)) {\n    return session[action.modelName];\n  }\n\n  return null;\n}\n\nfunction createModel(model: typeof Model, action: IModelUpdate) {\n  model.create(action.payload);\n}\n\nfunction updateModel(model: typeof Model, action: IModelUpdate) {\n  const payload = action.payload;\n  model.withId(payload.id).update(payload);\n}\n\nfunction destroyModel(model: typeof Model, action: IModelIdAction) {\n  model.withId(action.id).delete();\n}\n\nfunction successfulListModel(model: typeof Model, action: ISuccessfulListModel) {\n  action.items.forEach((item: IModel) => {\n    model.upsert(item);\n  });\n}\n\nfunction startSyncimgModel(model: typeof Model, action: IModelIdAction) {\n  model.withId(action.id).update({syncing: true});\n}\n"]}